diff --git a/libs/libkis/CMakeLists.txt b/libs/libkis/CMakeLists.txt
index 538fd12..20226c3 100644
--- a/libs/libkis/CMakeLists.txt
+++ b/libs/libkis/CMakeLists.txt
@@ -13,6 +13,7 @@ set(kritalibkis_LIB_SRCS
     Notifier.cpp
     PresetChooser
     Palette.cpp
+    PaletteView.cpp
     Resource.cpp
     Selection.cpp
     View.cpp
diff --git a/libs/libkis/ManagedColor.h b/libs/libkis/ManagedColor.h
index 52e8c1d..86afa24 100644
--- a/libs/libkis/ManagedColor.h
+++ b/libs/libkis/ManagedColor.h
@@ -199,6 +199,7 @@ public:
 private:
 
     friend class View;
+    friend class PaletteView;
     KoColor color() const;
 
     struct Private;
diff --git a/libs/libkis/Palette.cpp b/libs/libkis/Palette.cpp
index 8851186..ca02e02 100644
--- a/libs/libkis/Palette.cpp
+++ b/libs/libkis/Palette.cpp
@@ -100,3 +100,8 @@ ManagedColor *Palette::colorForEntry(KoColorSetEntry entry)
     ManagedColor *color = new ManagedColor(entry.color);
     return color;
 }
+
+KoColorSet *Palette::colorSet()
+{
+    return d->palette;
+}
diff --git a/libs/libkis/Palette.h b/libs/libkis/Palette.h
index 50297d6..cf7332f 100644
--- a/libs/libkis/Palette.h
+++ b/libs/libkis/Palette.h
@@ -115,9 +115,16 @@ public:
     //Insert
 
 private:
+    friend class PaletteView;
     struct Private;
     Private *const d;
 
+    /**
+     * @brief colorSet
+     * @return gives qa KoColorSet object back
+     */
+    KoColorSet *colorSet();
+
 };
 
 #endif // LIBKIS_PALETTE_H
diff --git a/libs/libkis/PaletteView.cpp b/libs/libkis/PaletteView.cpp
new file mode 100644
index 0000000..36c8c66
--- /dev/null
+++ b/libs/libkis/PaletteView.cpp
@@ -0,0 +1,83 @@
+/*
+ *  Copyright (c) 2017 Wolthera van Hövell tot Westerflier <griffinvalley@gmail.com>
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU Lesser General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU Lesser General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+ */
+
+#include <PaletteView.h>
+#include <QVBoxLayout>
+
+struct PaletteView::Private
+{
+    KisPaletteModel *model = 0;
+    KisPaletteView *widget = 0;
+    bool allowPaletteModification = true;
+};
+
+PaletteView::PaletteView(QWidget *parent)
+    : QWidget(parent), d(new Private)
+{
+    d->widget = new KisPaletteView(parent);
+    d->model = new KisPaletteModel();
+    d->widget->setModel(d->model);
+    this->setLayout(new QVBoxLayout());
+    this->layout()->addWidget(d->widget);
+
+    //forward signals.
+    connect(d->widget, SIGNAL(entrySelected(KoColorSetEntry)),
+                 this, SIGNAL(entrySelectedForeGround(KoColorSetEntry)));
+    connect(d->widget, SIGNAL(entrySelectedBackGround(KoColorSetEntry)),
+            this, SIGNAL(entrySelectedBackGround(KoColorSetEntry)));
+}
+
+PaletteView::~PaletteView()
+{
+
+}
+
+void PaletteView::setPalette(Palette *palette)
+{
+    d->model->setColorSet(palette->colorSet());
+    d->widget->setPaletteModel(d->model);
+}
+
+bool PaletteView::addEntryWithDialog(ManagedColor *color)
+{
+    if (d->model->colorSet()) {
+        return d->widget->addEntryWithDialog(color->color());
+    }
+    return false;
+}
+
+bool PaletteView::addGroupWithDialog()
+{
+    if (d->model->colorSet()) {
+        return d->widget->addGroupWithDialog();
+    }
+    return false;
+}
+
+bool PaletteView::removeSelectedEntryWithDialog()
+{
+    if (d->model->colorSet()) {
+        return d->widget->removeEntryWithDialog(d->widget->currentIndex());
+    }
+    return false;
+}
+
+void PaletteView::trySelectClosestColor(ManagedColor *color)
+{
+    d->widget->trySelectClosestColor(color->color());
+}
diff --git a/libs/libkis/PaletteView.h b/libs/libkis/PaletteView.h
new file mode 100644
index 0000000..a88e810
--- /dev/null
+++ b/libs/libkis/PaletteView.h
@@ -0,0 +1,58 @@
+/*
+ *  Copyright (c) 2017 Wolthera van Hövell tot Westerflier <griffinvalley@gmail.com>
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU Lesser General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU Lesser General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+ */
+
+#ifndef LIBKIS_PALETTE_VIEW_H
+#define LIBKIS_PALETTE_VIEW_H
+
+#include <QObject>
+#include <QScopedPointer>
+#include "kritalibkis_export.h"
+#include "libkis.h"
+#include "Palette.h"
+#include "ManagedColor.h"
+#include "KoColorSet.h"
+#include <kis_palette_view.h>
+#include <KisPaletteModel.h>
+
+/**
+ * @brief The PaletteView class is a wrapper around a MVC method for handling
+ * palettes. This class shows a nice widget.
+ */
+
+class KRITALIBKIS_EXPORT PaletteView : public QWidget
+{
+    Q_OBJECT
+public:
+    PaletteView(QWidget *parent = 0);
+    ~PaletteView();
+public Q_SLOTS:
+    void setPalette(Palette *palette);
+    bool addEntryWithDialog(ManagedColor *color);
+    bool addGroupWithDialog();
+    bool removeSelectedEntryWithDialog();
+    void trySelectClosestColor(ManagedColor *color);
+Q_SIGNALS:
+    void entrySelectedForeGround(KoColorSetEntry entry);
+    void entrySelectedBackGround(KoColorSetEntry entry);
+private:
+    struct Private;
+    const QScopedPointer<Private> d;
+
+};
+
+#endif // LIBKIS_PALETTE_VIEW_H
diff --git a/libs/ui/kis_palette_view.cpp b/libs/ui/kis_palette_view.cpp
index fae4d67..b28f674 100644
--- a/libs/ui/kis_palette_view.cpp
+++ b/libs/ui/kis_palette_view.cpp
@@ -194,10 +194,12 @@ void KisPaletteView::setPaletteModel(KisPaletteModel *model)
     }
     m_d->model = model;
     setModel(model);
+    paletteModelChanged();
     connect(m_d->model, SIGNAL(layoutChanged(QList<QPersistentModelIndex>,QAbstractItemModel::LayoutChangeHint)), this, SLOT(paletteModelChanged()));
     connect(m_d->model, SIGNAL(rowsMoved(QModelIndex,int,int,QModelIndex,int)), this, SLOT(paletteModelChanged()));
     connect(m_d->model, SIGNAL(rowsInserted(QModelIndex,int,int)), this, SLOT(paletteModelChanged()));
     connect(m_d->model, SIGNAL(rowsRemoved(QModelIndex,int,int)), this, SLOT(paletteModelChanged()));
+    connect(m_d->model, SIGNAL(modelReset()), this, SLOT(paletteModelChanged()));
 
 }
 
@@ -209,11 +211,15 @@ KisPaletteModel* KisPaletteView::paletteModel() const
 void KisPaletteView::updateRows()
 {
     this->clearSpans();
-    for (int r=0; r<=m_d->model->rowCount(); r++) {
-        QModelIndex index = m_d->model->index(r, 0);
-        if (qVariantValue<bool>(index.data(KisPaletteModel::IsHeaderRole))) {
-            setSpan(r, 0, 1, m_d->model->columnCount());
-            setRowHeight(r, this->fontMetrics().lineSpacing()+6);
+    if (m_d->model) {
+        for (int r=0; r<=m_d->model->rowCount(); r++) {
+            QModelIndex index = m_d->model->index(r, 0);
+            if (qVariantValue<bool>(index.data(KisPaletteModel::IsHeaderRole))) {
+                setSpan(r, 0, 1, m_d->model->columnCount());
+                setRowHeight(r, this->fontMetrics().lineSpacing()+6);
+            } else {
+                this->setRowHeight(r, this->columnWidth(0));
+            }
         }
     }
 }
diff --git a/plugins/extensions/pykrita/plugin/plugins/palette_docker/palette_docker.py b/plugins/extensions/pykrita/plugin/plugins/palette_docker/palette_docker.py
index 641a521..27ec9ce 100644
--- a/plugins/extensions/pykrita/plugin/plugins/palette_docker/palette_docker.py
+++ b/plugins/extensions/pykrita/plugin/plugins/palette_docker/palette_docker.py
@@ -52,18 +52,22 @@ class Palette_Docker(DockWidget):
         self.currentPalette = Palette(allPalettes["Default"])
         self.cmb_palettes.currentTextChanged.connect(self.slot_paletteChanged)
         layout.addWidget(self.cmb_palettes) # add combobox to the layout
-        self.palette_frame = QScrollArea()
-        self.palette_frame.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOn)
-        self.palette_container = QWidget()
-        self.palette_frame.setContentsMargins(0,0,0,0)
-        self.palette_layout = QVBoxLayout()
-        self.palette_layout.setSpacing(0)
-        self.palette_layout.setContentsMargins(0,0,0,0)
-        self.palette_container.setLayout(self.palette_layout)
-        self.palette_frame.setWidget(self.palette_container)
-        layout.addWidget(self.palette_frame)
-        print("palette")
-        self.fill_palette_frame()
+        self.paletteView = PaletteView()
+        self.paletteView.setPalette(self.currentPalette)
+        layout.addWidget(self.paletteView)
+        self.paletteView.entrySelectedForeGround.connect(self.slot_swatchSelected)
+        #self.palette_frame = QScrollArea()
+        #self.palette_frame.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOn)
+        #self.palette_container = QWidget()
+        #self.palette_frame.setContentsMargins(0,0,0,0)
+        #self.palette_layout = QVBoxLayout()
+        #self.palette_layout.setSpacing(0)
+        #self.palette_layout.setContentsMargins(0,0,0,0)
+        #self.palette_container.setLayout(self.palette_layout)
+        #self.palette_frame.setWidget(self.palette_container)
+        #layout.addWidget(self.palette_frame)
+        #print("palette")
+        #self.fill_palette_frame()
         self.setWidget(widget)        # add widget to the docker
     
     
@@ -122,7 +126,7 @@ class Palette_Docker(DockWidget):
             
             for i in range(colorCount):
                 entry = self.currentPalette.colorSetEntryFromGroup(i, groupName)
-                color = self.currentPalette.colorForEntry(entry);
+                color = self.currentPalette.colorForEntry(entry)
                 swatch = palette_swatch_widget(self, color.colorForCanvas(self.canvas()), color)
                 swatch.setToolTip(entry.name)
                 swatch.setFixedHeight(swatchSize)
@@ -130,7 +134,7 @@ class Palette_Docker(DockWidget):
                 row = math.floor(i/columnCount)
                 gb_groupBox.layout().addWidget(swatch, row, column)
                 #print("palette swatch added "+entry.name+" "+str(column)+", "+str(row))
-                swatch.colorSelected.connect(self.slot_swatchSelected)
+                #swatch.colorSelected.connect(self.slot_swatchSelected)
             
             self.palette_layout.addWidget(gb_groupBox)
             gb_groupBox.adjustSize()
@@ -139,17 +143,19 @@ class Palette_Docker(DockWidget):
         
     def slot_paletteChanged(self, name):
         self.currentPalette = Palette(Application.resources("palette")[name])
-        self.fill_palette_frame()
+        self.paletteView.setPalette(self.currentPalette)
+        #self.fill_palette_frame()
 
-    @pyqtSlot('ManagedColor')
-    def slot_swatchSelected(self, color):
-        print("color "+color.toQString())
+    @pyqtSlot('KoColorSetEntry')
+    def slot_swatchSelected(self, entry):
+        print("entry "+entry.name)
         if (self.canvas()) is not None:
             if (self.canvas().view()) is not None:
+                color = self.currentPalette.colorForEntry(entry)
                 self.canvas().view().setForeGroundColor(color)
 
     def canvasChanged(self, canvas):
-        self.fill_palette_frame()
+        #self.fill_palette_frame()
         pass
 
 #Add docker to the application :)
diff --git a/plugins/extensions/pykrita/sip/krita/PaletteView.sip b/plugins/extensions/pykrita/sip/krita/PaletteView.sip
new file mode 100644
index 0000000..21bc77b
--- /dev/null
+++ b/plugins/extensions/pykrita/sip/krita/PaletteView.sip
@@ -0,0 +1,20 @@
+class PaletteView : QWidget
+{
+%TypeHeaderCode
+#include "PaletteView.h"
+%End
+PaletteView(const PaletteView & __0);
+public:
+    PaletteView(QWidget *parent = 0);
+    ~PaletteView();
+public Q_SLOTS:
+    void setPalette(Palette *palette);
+    bool addEntryWithDialog(ManagedColor *color);
+    bool addGroupWithDialog();
+    bool removeSelectedEntryWithDialog();
+    void trySelectClosestColor(ManagedColor *color);
+Q_SIGNALS:
+    void entrySelectedForeGround(KoColorSetEntry entry);
+    void entrySelectedBackGround(KoColorSetEntry entry);
+private:
+};
diff --git a/plugins/extensions/pykrita/sip/krita/kritamod.sip b/plugins/extensions/pykrita/sip/krita/kritamod.sip
index 24638ca..962ec2f 100644
--- a/plugins/extensions/pykrita/sip/krita/kritamod.sip
+++ b/plugins/extensions/pykrita/sip/krita/kritamod.sip
@@ -29,6 +29,7 @@
 %Include Extension.sip
 %Include PresetChooser.sip
 %Include Palette.sip
+%Include PaletteView.sip
 %Include ManagedColor.sip
 
 %Include KisCubicCurve.sip
