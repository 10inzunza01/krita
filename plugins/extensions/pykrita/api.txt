class Krita : 
    Properties:
        Actions : QList<Action*>
        ActiveDocument : Document*
        Batchmode : bool 
        Documents : QList<Document*>
        Exporters : QList<Exporter*>
        Filters : QList<Filter*>
        Generators : QList<Generator*>
        Importers  : QList<Importer*>
        Notifier : Notifier*
        Preferences : InfoObject*
        Version : QString
        Views : QList<View*>
        Windows : QList<Window*> 
        Resources : QList<Resource*>
    Slots:
        addDockWidget(DockWidget *dockWidget) : void
        addAction(Action *action) : void 
        closeApplication() : bool
        createDocument() : Document*
        openDocument() : Document*
        openWindow() : Window*
        
class Notifier : 
    Properties:
        Active : bool
    Signals:
        applicationStarted()
        applicationClosed()
        imageCreated(Document *image)
        imageLoaded(Document *image)
        imageSaved(Document *image)
        imageClosed(Document *image)
        nodeCreated(Document *node)

        
class Document : 
    Properties:
        ActiveNode : Node*
        ColorDepth : ColorDepth*
        ColorManager : ColorManager*
        ColorModel : ColorModel*
        ColorProfile : ColorProfile*
        DocumentInfo : InfoObject*
        FileName : QString
        Height : int
        MetaData : InfoObject*
        Name : QString
        Resolution : int
        RootNode : Node*
        Selection : Selection*
        Width : int
        PixelData : QByteArray
    Slots:
        clone() : Document *
        close() : bool
        convert(const QString &colorModel, const ColorProfile *profile) : bool
        crop(int x, int y, int w, int h) : void
        Export(const InfoObject &exportConfiguration) : bool
        Flatten() : void
        ResizeImage(int w, int h) : void
        Save(const QString &url) : bool
        SaveAs(const QString &url) : bool
        OpenView() : void
        CreateNode(const QString &name, const QString &nodeType) : Node*
class Node : 
    Properties:
        AlphaLocked : bool
        BlendingMode : QString
        Channels : QList<Channel*>
        ChildNodes : QList<Node*>
        ColorDepth : ColorDepth*
        ColorLabel : QString
        ColorModel : ColorModel*
        ColorProfile : ColorProfile*
        InheritAlpha : bool
        Locked : bool
        Name : QString
        Opacity : int
        ParentNode : Node*
        Type : QString
        Visible : bool
        MetaDataInfo : InfoObject*
        Generator : Generator*
        Filter : Filter*
        Transformation : Transformation*
        Selection : Selection*
        FileName : QString
        PixelData : QByteArray
    Slots:
        move(int x, int y) : void
        moveToParent(Node *parent) : void
        remove() : void
        duplicate() : Node*
        
class Channel :
    Properties:
        visible : bool
        
class Filter : 
    Properties:
        Configuration : InfoObject*
    Slots:
        Apply(int x, int y, int w, int h) : void
        
class Generator : 
    Properties:
        Configuration : InfoObject*
    Slots:
        CreateNode() : Node*
    
class Action : 
    Properties:
        Name : QString
        Menu : QString
        Checkable : bool
        Checked : bool
        Shortcut : QString
        Visible : bool
        Enabled : bool
    Slots:
        Trigger() : void
        Toggle(bool toggle) : void
    Signals:
        Toggled(bool toggle)
        Triggered()
        
class Canvas :
    Properties:
        Document : Document*
        ZoomLevel : int
        Rotation : int
        Mirror : bool
        ColorManager : ColorManager*
        
class ColorManager :
    Properties:
        Type : QString
        OcioSettings : InfoObject*
        
class Exporter :
    Properties:
        Document : Document*
        ExportSetttings : InfoObject*
    Slots:
        Export(const QString &filename) : bool
        
class Importer :
    Properties:
        Document : Document*
        ImportSettings : InfoObject*
    Slots:
        Import(const QString &filename) : bool
        
class View :
    Properties:
        Window : Window*
        Document : Document*
        Visible : bool
        Canvas : Canvas*
    Slots:
        Close(bool confirm) : void
        
class Window :
    Properties:
        Views : QList<View*>
        ViewMode : QString
    Slots:
        Close(bool confirm) : void
        
class DockWidget :
    Properties:
        Canvas : Canvas*
    Slots:
        canvasChanged(Canvas *canvas) : void
        
class ColorDepth :
    Properties:
        depth : int
        
class ColorModel :
    Properties:
        colorModelID : QString
        
class ColorProfile :
    Properties:
        name : QString

class InfoObject :
    Properties:
        properties : QMap<QString, QVariant>
    Slots:
        setProperty(const QString &key, QVariant value) : void
        property(const QString &key) : QVariant
        
    
class Selection :
    Properties:
        Width : int
        Height : int
        X : int
        Y : int
        Type : QString
    Slots:
        clear() : void
        contract(int value) : void
        copy(int x, int y, int w, int h) : Selection*
        cut(Node* node) : void
        deselect() : void
        expand(int value) : void
        feather(int value) : void
        fill(Node* node) : void
        grow(int value) : void
        invert() : void
        resize(int w, int h) : void
        rotate(int degrees) : void
        select(int x, int y, int w, int h, int value) : void
        selectAll(Node *node) : void
        
class Resource :
    Properties:
        Type : QString
        Name : QString
        Filename : QString
        
class Transformation :
    Properties:
        Definition : QString
        

class Dummy :     
$$$$$ END $$$$$        
          
